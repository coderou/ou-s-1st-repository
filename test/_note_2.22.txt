>>>>>>>>>笔记
  1.移动端比较常见的就是手机登录和授权登录
  2.未来工作的时候数据非常复杂,量大,所以有时候会让你重新写一个数据结构放进去
  3.遇到很多次了,...可以遍历对象
  4.什么时候会设计数据结构?
    当拿到大量的后台数据,
    前台显示如果直接写,
    会导致维护困难代码易读性变差,
    这时候设计一个数据结构将需要的数据放进去,
    在对改数据结构进行渲染,
    就会变得简单多,
    这时候就需要设计数据结构
  5.如何剪切当前行
  6.2021年2月22日10:36:55
  7.实际应用的时候都是嵌套在原生app的,用户没法输入url刷新
  8.单页面应用之间切换都是进行组件卸载,进行切换
  9.写一个demo实现搜索框筛选的功能
  10.黑盒测试:不懂代码,点点点\白盒测试:懂代码,写代码测试
  11.遇到bug找原因,先还原场景
  12.ele.scrollIntoView()//dom原生的方法,将视图滚动到对应的地方
  13.github前端代码就一行,基本都是后端的代码
  14.oAuth2.0是一个授权机制,一个规范
  15.第三步其实是重定向,会有一个code,客户端给公司服务器传递这个code,后端通过token去第三方获取密码,返回用户信息
  16.2021年2月22日14:28:50
  17.se6的引入方式存在一定的问题,一上来所有的组件全部都会加载到内存中
  18.代码分割和懒加载是配合的
  19.npm start可以忽略run, 但是build可以要npm run build
  20.chunk:块
  21. .map文件主要是为了报错的时候能够精确找到对应错误的文件,记录了打包后的代码和源代码的对应关系
  22.批量删除.map文件的方式:  $ del *.map
  23.2021年2月22日15:25:13
  24.resolve是对最近的promise起作用
  25.面试题往往有坑,没坑他测不出人才
  26.虚拟dom本质上是对象,操作起来效率比真实dom高
  27.react的diff算法基本策略
    策略1(tree diff),比较只会同层次比较,而不会跨层次
    策略2(component diff),相同类型的组件认为结构是相同/相似的,而不是同类型的组件,如Header和Footer.如果是相同的,再进去判断tree
    策略3(element diff),同一层次中的element,通过ID进行区分,即同一级下的兄弟通过这个比较,key={item.id}之类的
  28.shouldComponentUpdate()极大地优化react的性能
  29.不要把最后一个节点直接放到前面去,会动很多次,推荐一个隐藏在最前面
  30.移动端:1px高清显示,图片高清显示
  31.flutter,dault?,现在特别流行脚本语言,弱类型语言
  32.小公司恨不得让你吧什么全都干了,所以能学到东西,大公司就是混一个资历,就是一个螺丝钉一个萝卜一个坑
  33.




>>>>>>>>>
