1.这个月月底就结束了
2.小程序,TS,VUE3 
3.🍔🍟🍟🍟🍟面试题!背!
4.限制图片数量:limit,然后disable隐藏,但是还是有这个添加符号,最后displaynone,配合disable
  当熟练超过限制displaynone,点不了就上传不了
5.async await 无法捕捉错误,要配合try catch使用
  .then和.catch和.finally可以处理错误,写.catch就好
6.有时间自己看看ElementUI的一些组件
7.flutter
8.🍔Value=Value.filter(Boolean) ==> 过滤为空的(比如undefined)
9.折线图,柱状图,饼图
10.完成本首页dashbord上面的是echarts用法,下面的是其他库,D3
11.
  series:数据
  bar:条形图/柱状图
12.百度api可以申请一些东西,比如地球模型等(在echarts官网看)
13.初始化实例,配置对象option
  areaStyle:渐变方式
  tookbox:保存图片的工具,不需要可以删除掉
14.webcomponents:html已经支持一些组件了,比如line
  所以取组件名字的时候,就最好注意一下
15.主题是要下载的,是一个json文件
16.bmap是百度地图,echarts是百度的,比如需要地图,就可以用这个
17.json后缀名可以省略不写
18.🍟🍟你的一生,可以玩儿的游戏是有限的
  因为有限,所以珍贵
  但是为了更好的玩儿游戏，请好好学习
19.看尤雨溪演讲？
20.grid调整显示位置(说明其采用的方案为grid布局??)
21.loading加载动画:echarts-api-echartsInstance-showLoading-hideLoading
22.响应式和大小改变:echartsInstance-resize
  window.addEventListener('resize',fnc)
  tip:原生事件vue不会处理,需要手动解绑,即将函数定义在methods中,在unmounted/beforeDestroy中删除事件绑定
23.2021年3月26日16:33:41
  时间已经不多了,1个月的时间还来得及,如果你4月开始复习,绝队来不及,请不要再松懈了,每天刷题!刷题!刷题!
  tip:记得设定一个时间限制
24.ant Design中有色彩的一些选形
25.mixins:Vue的一种语法
  #resize.js
    {
      export default{
        mounted(){

        },
        beforeDestroy(){

        }
      }
    }
  #
16.2021年3月26日16:59:00
  摸鱼
17.mixins更好的方式是封装为组件
18.v-charts  vue charts搜索github
19.部署服务器??
20.如果没学好,就没得挑,如果学得好,就有的调
21.每周公司都会迭代?然后等2-3点才回家?
22.一些面试题的笔记
23.唉,斐波那契函数算是真正将我带入门的算法题了,现在斐波那契也到极限了,网上的for计算方法基本上时极限时间了,无法优化了
24.图标还没写

25.面试题
  1.Generator函数返回是是一个Generator对象  
    tip:async本质上是Generator函数的语法糖
  2.Math.max(x) 的参数x要求是Number类型
    Math.max.apply(Math,arr)也可以,因为apply的参数是数组,触发数组解构赋值
  3.document.all  // 获取页面所有节点
    document.getElementsByTagName('*') // 获取页面所有节点
    dom.style.width 返回的是字符串  //dom表示节点
    offsetWidth返回的是Number
    parserFloat 字符串转数值  a123 -> NaN
    window.onload=function(){}
  4.<table><tr><td></td></tr></table>
    tr表示行,一个tr就是一行,r表示row
    td表示改行的列
    css:{
      .table tr:nth-child(odd){} // 快速选择奇数行
      .table tr:nth-child(even){} // 快速选择偶数
      // X:nth-child表示X的第N个子元素
    }
  5.arguments有length属性,并且可以通过arguments[n]获取第n个参数
    parseFloat('a')的值是NaN
    parseFloat(true/false)  1 / 0
    toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。
    比如0.1+0.2 = 0.300000000004的问题
    可以 (0.1+0.2).toFixed(3)*1000/1000
    语法:{
      NumberObject.toFixed(num)
      num	必需。规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替。
    }
  6.splice(a,b,c)是从a删除b个,a后添加c
    let arr = ['a', 'b', 'c', 'd'];
    arr.splice(1, 2, '你好');
    console.log(arr); // ['a','你好','d']
  8.for in 会遍历数组,会遍历原型链上的所有属性,如何过滤?
    hasOwnProperty
    代码:{
      Array.prototype.name='你好'
      let arr1 = [1, 2, 3];
      for (var i in arr) {
        console.log(i);
      }
      console.log(arr1);
    }
  9.斐波那契(都可以计算100000位的了,我的慢4倍):
    最快:{
      <!-- 网上最快<script>
        var start = Date.now();
        function fibonacci(n) {
          var res1 = 1n;
          var res2 = 1n;
          var sum = res2;
          for (var i = 1; i < n; i++) {
            sum = res1 + res2;
            res1 = res2;
            res2 = sum;
          }
          return sum;
        }
        console.log(fibonacci(100000));
        var end = Date.now();
        console.log(end - start);
      </script> -->
    }
    自己的(借用数组):{
      var start = Date.now();
      var temp = [1n, 1n];
      function get(n) {
      var m = 2;
        // 核心算法层:
        while (m < n) {
          temp[m] = temp[m - 1] + temp[m - 2];
          m++;
        }
        return temp[n - 1n];
      }
      // var res = get(100000n);
      var res = get(100000n);
      var end = Date.now();
      console.log(res);
      console.log(end - start); // 单位数ms级,即使是100000,也不会超过1s
    }
  10.遍历对象:for in和Object.keys
    tip:for of需要有iterable接口
    var data = {a: 1, b: 2, c: 3, d: 4};
    let res=Object.keys(data).filter(function(x) { return data[x]>2})
    console.log(res)
  11.函数只要是直接调用,this指向window,但是window也是对象可以添加属性值和方法的
  12.JS语言实现继承机制的核心是原型和原型链
  14.盒子计算宽高的时候默认计算content区域
  15.oncontextmenu是右键菜单,如果是addEventListener则是contextmenu
  16.JS获取和设置cookie?
    创建cookie
    {
      function setCookie(name, value, expires, path, domain, secure) {
        var cookieText = encodeURIComponent(name) + '=' + encodeURIComponent(value); if (expires instanceof Date) {
        cookieText += '; expires=' + expires;
        }
        if (path) {
        cookieText += '; expires=' + expires;
        }
        if (domain) {
        cookieText += '; domain=' + domain;
        }
        if (secure) {
        cookieText += '; secure';
        }
        document.cookie = cookieText;
      }
    }
    获取cookie
    {
      function getCookie(name) {
        var cookieName = encodeURIComponent(name) + '=';
        var cookieStart = document.cookie.indexOf(cookieName);
        var cookieValue = null;
        if (cookieStart > -1) {
        var cookieEnd = document.cookie.indexOf(';', cookieStart);
        if (cookieEnd == -1) {
        cookieEnd = document.cookie.length;
        }
        cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + 
        cookieName.length, cookieEnd));
        }
        return cookieValue;
      }
    }
    删除cookie
    {
      function unsetCookie(name) {
        document.cookie = name + "= ; expires=" + new Date(0);
      }
    }
  17.🧡🧡cache-control是怎么回事?  
    应该是http相关的内容,涉及到和服务器交互
  18.http状态码
    {
      100 Continue 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回
      此信息，表示确认，之后发送具体参数信息
      200 OK 正常返回信息
      201 Created 请求成功并且服务器创建了新的资源
      202 Accepted 服务器已接受请求，但尚未处理
      301 Moved Permanently 请求的网页已永久移动到新位置
      302 Found 临时性重定向
      303 See Other 临时性重定向，且总是使用 GET 请求新的 URI 
      304 Not Modified 自从上次请求后，请求的网页未修改过
      400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容
      发起请求
      401 Unauthorized 请求未授权
      403 Forbidden 禁止访问
      404 Not Found 找不到如何与 URI 相匹配的资源
      500 Internal Server Error 最常见的服务器端错误
      503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）
    }
  19.数组去重在HTML文件夹里面备份,可以考虑记下3个去重方式
  20.🧡🧡获取UA?UA是什么?
    {
      function whatBrowser() { 
        document.Browser.Name.value=navigator.appName; 
        document.Browser.Version.value=navigator.appVersion; 
        document.Browser.Code.value=navigator.appCodeName; 
        document.Browser.Agent.value=navigator.userAgent; 
      }
    }
  21.网站重构的理解(注意是网站重构,不是重绘重排)
    {
      网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一
      致的行为。也就是说是在不改变 UI 的情况下，对网站进行优化，在扩展的同时保持一致的
      UI。
      对于传统的网站来说重构通常是：
      1. 表格(table)布局改为 DIV + CSS 
      2. 使网站前端兼容于现代浏览器(针对于不合规范的 CSS、如对 IE6 有效的) 
      3. 对于移动平台的优化
      4. 针对于 SEO 进行优化
      5. 深层次的网站重构应该考虑的方面
      6. 减少代码间的耦合
      7. 让代码保持弹性
      8. 严格按规范编写代码
      9. 设计可扩展的 API 
      10. 代替旧有的框架、语言(如 VB) 
      11. 增强用户体验
      12. 通常来说对于速度的优化也包含在重构中
      13. 压缩 JS、CSS、image 等前端资源(通常是由服务器来解决) 
      14. 程序的性能优化(如数据读写) 
      15. 采用 CDN 来加速资源加载
      16. 对于 JS DOM 的优化17. HTTP 服务器的文件缓存
      17. HTTP 服务器的文件缓存
    }
  22.浅克隆
    {
      function clone(Obj) {
        var buf; 
        if (Obj instanceof Array) {
          buf = []; // 创建一个空的数组
          var i = Obj.length;
          while (i--) {
          buf[i] = clone(Obj[i]);
          }
          return buf;
        } else if (Obj instanceof Object){
          buf = {}; // 创建一个空对象
          for (var k in Obj) { // 为这个对象添加新的属性
          buf[k] = clone(Obj[k]);
        }
          return buf;
        }else{
          return Obj;
        }
      }
    }
  23.🧡🧡跨域问题
    {
      使用 document.domain+iframe 解决跨子域问题
      使用 window.name 
      使用 flash 
      使用 iframe+location.hash 
      使用 html5 的 postMessage ；
      使用 jsonp （创建动态 script ）
    }
  24.IE和火狐的事件机制有什么区别?如何阻止冒泡?
    IE是捕获,触发事件的顺序是从外到内,火狐和谷歌相反,触发是从内到外,是冒泡
    阻止:e.preventPropagation
    旧版本IE:e.cancelBubble=true
  25.http相关的web引用从服务器主动推送Data到客户端的方式
    {
      1. html5 websoket 
      2. WebSocket 通过 Flash 3. XHR 长时间连接
      4. XHR Multipart Streaming 
      5. 不可见的 Iframe 
      6. <script>标签的长时间连接(可跨域)
    }
  26.重构页面?
    1.减少重绘重排,优化性能
    2.使用懒加载技术,提高首屏加载速度
  27.原型原型链
  28.NODE.js适用于:高并发,聊天,实时消息推送
  29.写一个通用的事件侦听器函数??
  30.eval是做什么的,有什么建议?
    1.可以将字符串解析为JS代码运行
    2.尽量避免使用
    3.第一次会解析为JS语句，第二次会执行
  31.JS阻塞和css阻塞
    {
      嵌入 JS 会阻塞所有内容的呈现，而外部 JS 只会阻塞其后内容的显示，2 种方式都会
      阻塞其后资源的下载。也就是说外部样式不会阻塞外部脚本的加载，但会阻塞外部脚本的执
      行。
    }
    {
      当 CSS 后面跟着嵌入的 JS 的时候，该 CSS 就会出现阻塞后面资源下载的情况。而当把嵌入 JS 放到 CSS 前面，就不会出现阻塞的情况了。
    }
    {
      根本原因：因为浏览器会维持 html 中 css 和 js 的顺序，样式表必须在嵌入的 JS 执
      行前先加载、解析完。而嵌入的 JS 会阻塞后面的资源加载，所以就会出现上面 CSS 阻塞
      下载的情况。  
    }
  32.get和post的区别,什么时候用post
    {
      GET：一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在
      2000 个字符
      POST：一般用于修改服务器上的资源，对所发送的信息没有限制
      GET 方式需要使用 Request.QueryString 来取得变量的值
      POST 方式通过 Request.Form 来获取变量的值
      也就是说 Get 是通过地址栏来传值，而 Post 是通过提交表单来传值。
      在以下情况中，请使用 POST 请求：
      1. 无法使用缓存文件（更新服务器上的文件或数据库）
      2. 向服务器发送大量数据（POST 没有数据量限制）
      3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠
    }
  33.use strict是什么,怎么用,好处是什么,坏处是什么
    概念:是ES5第二中运行模式:严格模式
    IE6-9不支持严格模式
  34.JS同源策略
    概念:协议,域名,端口号相同,就是同源
    为什么要有同源策略?
      {比如一个黑客程序，他利用 Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过 Javascript 读取到你的表单中 input 中的内容，这样用户名，密码就轻松到手了。}
  36.什么是优雅降级,渐进增强?
    优雅降级:优先满足高级的,新版的浏览器的呈现效果,兼容\优化\去除旧版浏览器不支持的内容
      常见电商网站
    渐进增强:从低级浏览器开始,逐步添加新浏览器duang的功能
      常见传统业务网站
  37.内存泄露
    概念:指对象在不需要它之后仍然存在
    当对象\变量不存在引用,会被回收
    主要的问题:
      1.setTimeout参数1使用字符串
      2.闭包(可手动释放)
      3.控制台日志
      4.对象循环保存彼此的引用
  38.call\apply\bind手写
  39.ul>li绑定点击事件,打印其序号,如何准确?(请至少记住3种方法)
    {
      现有如下 html 结构
      <ul>
      <li>click me</li>
      <li>click me</li>
      <li>click me</li>
      <li>click me</li>
      </ul>
      运行如下代码：
      var elements=document.getElementsByTagName('li');
      var length=elements.length;
      for(var i=0;i<length;i++){
      elements[i].onclick=function(){
      alert(i);
      }
      }
    }
  40.闭包相关(什么是闭包,闭包的作用,等等)
  41.判断字符串转换的时候注意 "undefined" 和undefined
  42.%运算会转换数值,可以看一下李南江的笔记,有哪些会转换数值等
  43.🧡💚💚代码题:[判断字符串a中有字符串b的函数]
    {
      function indexOf(str,subStr){
        var result=str.match(subStr);
        retuen result ? result.index:-1;
      }
      或者
      function indexOf(a,b){
        return a.search(b)
      }
    }
    tip1:a.search(b)方法,在a字符串中搜索b字符串,有返回1,没有返回-1
    tip2:字符串match方法:
    {
      var str='123456789'
      undefined
      str.match('3')
      ["3", index: 2, input: "123456789", groups: undefined]
      0: "3"
      groups: undefined
      index: 2
      input: "123456789"
      length: 1
      __proto__: Array(0)
    }
  tip:收集一下字符串的方法,数组的方法
  44.立即执行匿名函数表达式（IIFE）是由 window 调用的，this 指向 window 。
  45.🍟🍟IE和Chrome和firefox的兼容性问题
    innerText IE支持,firefox不支持
    document.createElement IE支持
    setAttribute('class','styleClass') IE不支持 firefox支持
    setAttribute 都可以,只是形式不同
      IE678无法通过setAttribute 传入一段字符串设置一个元素的内联事件,必须传入function类型的对象
    等
  46.call和apply相关的问题
  47.js异步编程和发布/订阅?
    可以用于异步编程的:
      回调函数(比如settimeout)
      事件监听
        {
          f1.on('done', f2);
          function f1(){
          setTimeout(function () {
          // f1 的任务代码
          f1.trigger('done');
          }, 1000);
          }
        }
      发布/订阅
        {
          jQuery.subscribe("done", f2);
          function f1(){
          setTimeout(function () {
          // f1 的任务代码
          jQuery.publish("done");
          }, 1000);
          }
          jQuery.unsubscribe("done", f2);
        }
      Promise对象
  48.常见的事件名称等(select是设么事件?)
    Blur:失去焦点
    Focus:获得焦点
    change:文字改变,常见于input
    select:文字加亮???
  49.浏览器工作原理和常见的浏览器对象
    {
      Navagator：提供有关浏览器的信息。
      Window：Window 对象处于对象层次的最顶层，它提供了处理 Navagator 窗口的方法和
      属性。
      Location：提供了与当前打开的 URL 一起工作的方法和属性，是一个静态的对象。
      History：提供了与历史清单有关的信息。Document：包含与文档元素一起工作的对象，它将这些元素封装起来供编程人员使用。
    }
  50.字符串方法相关
    {
      A.parseFloat 方法：该方法将一个字符串转换成对应的小数
      B.isNaN
      C.escape 方法： 该方法返回对一个字符串编码后的结果字符串
      D.eval 方法：该方法将某个参数字符串作为一个 JavaScript 执行
    }
  51.JS变量定义规则(常见的保留字,常见关键字等)
  52.JS基本数据类型
  53.字符串相关,数组方法相关(字符串连接那个比较高效?)
    Array.join() 
    javascript 中字符串连接时用 Array.join()替换 string += "xx"，换来几十倍的速度提升。   
  54.函数接收的形参的基本类型值改变,不会影响原数据,但是如果是引用类型,看情况
  56.node环境下, require('xx')  时查找xx的顺序
    {
      
    }